/**
 * @file from_archive_restart
 * @brief A class to set IC from archive, in a special case
 */

#include "from_archive_restart.h"

using namespace ICs;

/**
 * Constructor. Does the tasks mentioned in detailed documentation.
 * - Set FromArchive::ar_triang_ using `dh`.
 * - Set FromArchive::ar_dof_handler_ using `dh`.
 * - Set FromArchive::ar_gcvars_ using owned dofs
 *
 * @param[in] dh Dof handler of the problem for which IC is to be set (as in class IC)
 * @param[in] dl Dof locations corresponding to `dh` (as in class IC)
 * @param[out] gcv Conservative variable vectors of the problem which are to be set (as in class
 *                 IC). Will be set in set().
 * @param[in] ar_filename The actual archive filename, the one which is generated by solution
 *                        transfer serialising.
 */
FromArchiveRestart::FromArchiveRestart(
    const DoFHandler<dim> &dh,
    const std::map<psize, Point<dim>> &dl,
    std::array<LA::MPI::Vector, 5> &gcv,
    const std::string &ar_filename
):
IC(dh, dl, gcv),
pcout(std::cout, (Utilities::MPI::this_mpi_process(dh.get_communicator())==0)),
ar_triang_(dh.get_communicator()),
ar_dof_handler_(ar_triang_)
{
    pcout << "\nRestarting simulation from archive"
        << "\nCopying triangulation of provided doh handler into archive's triangulation\n";
    // set the archive triangulation
    ar_triang_.copy_triangulation(dh.get_triangulation());

    // set the dof handler
    pcout << "Forming dof handler for archive using the fe of provided dof handler\n";
    ar_dof_handler_.distribute_dofs(dh.get_fe());

    // form the solution vectors
    pcout << "Reading the archive and setting the solution vectors\n";

    std::vector<LA::MPI::Vector*> ar_gcvar_ptrs;
    for(cvar var: cvar_list){
        // locally owned dofs available from base class ICs::IC
        ar_gcvars_[var].reinit(locally_owned_dofs_, dh.get_communicator());
        ar_gcvar_ptrs.emplace_back(&ar_gcvars_[var]);
    }

    ar_triang_.load(ar_filename);
    parallel::distributed::SolutionTransfer<dim, LA::MPI::Vector> sol_trans(ar_dof_handler_);
    sol_trans.deserialize(ar_gcvar_ptrs);
}
